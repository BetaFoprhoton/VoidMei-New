selector{
  name:t="defaultCTABot"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  selector{
    selectStrategy:t="ordered"
    name:t="taxi_and_takeoff"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="collisionAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    sequencer{

      isOnAirfield{
      }

      findClosestAirfield{
      }

      waitForAirfieldClearance{
      }

      taxiOnAirfield{
      }

      takeoff{
      }
    }

    waitOnLand{
    }
  }

  reaction{
    event:t="almostBeenHit"

    setNodeWithName{
      nodeName:t="doPanic"
    }
  }

  reaction{
    event:t="almostBeenHitFront"

    setNodeWithName{
      nodeName:t="doFrontalPanic"
    }
  }

  selector{
    selectStrategy:t="random"

    sequencer{

      reaction{
        event:t="regularCheck"

        sequencer{

          not{

            isInOuterFightArea{
            }
          }

          recalculateTree{
          }
        }
      }

      setSuitableFightArea{
        tagToCheck:t="fighter"
        innerRad:r=2500.0
        outerRad:r=4000.0
      }

      stayInFightArea{
      }

      findUnit{
        searchForAir:b=no
        searchForGround:b=yes
        onlyMissionTargets:b=no
        radius:r=100000.0
      }

      selector{
        selectStrategy:t="ordered"

        torpedoTarget{
        }

        bombTarget{
        }

        fighterAttackGround{
        }
      }
    }

    sequencer{

      reaction{
        event:t="regularCheck"

        sequencer{

          not{

            isInOuterFightArea{
            }
          }

          recalculateTree{
          }
        }
      }

      setSuitableFightArea{
        tagToCheck:t="fighter"
        innerRad:r=2500.0
        outerRad:r=4000.0
      }

      stayInFightArea{
      }

      parallel{

        updateTarget{
          searchForAir:b=yes
          onlyMissionTargets:b=no
          radius:r=100000.0
          distanceDifferenceToMaxSpeedRatio:r=9.0
        }

        ifThenElse{

          or{

            isTargetType{
              type:t="fighter"
            }

            isTargetType{
              type:t="bomber"
            }
          }

          selector{

            fighterAttackFighter{
              allowSpeedCheat:b=no
            }
          }

          fighterAttackGround{
          }
        }
      }
    }
  }

  sequencer{

    orbitHere{
      speed:r=260.0
      rollFactor:r=0.2
      alt:r=3000.0
      maxTime:r=10.0
    }
  }

  selector{
    name:t="doPanic"

    rollManeuver{
    }

    bellManeuver{
    }

    roll180Man{
    }

    waveout{
    }

    sinus{
    }

    zigzagSplit{
    }
  }

  selector{
    name:t="doFrontalPanic"

    rollManeuver{
    }

    roll180Man{
    }

    sinus{
    }

    turn{
      direction:t="right"
      maxRoll:r=60.0
      timeToTurn:r=1.3
    }

    turn{
      direction:t="left"
      maxRoll:r=60.0
      timeToTurn:r=1.3
    }

    turn{
      direction:t="right"
      maxRoll:r=60.0
      timeToTurn:r=0.4
    }

    turn{
      direction:t="left"
      maxRoll:r=60.0
      timeToTurn:r=0.4
    }

    turn{
      direction:t="right"
      maxRoll:r=60.0
      timeToTurn:r=0.5
    }

    turn{
      direction:t="left"
      maxRoll:r=60.0
      timeToTurn:r=0.5
    }
  }
}

selector{
  name:t="assaultBot"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  selector{
    selectStrategy:t="ordered"
    name:t="taxi_and_takeoff"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="collisionAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    sequencer{

      isOnAirfield{
      }

      findClosestAirfield{
      }

      waitForAirfieldClearance{
      }

      taxiOnAirfield{
      }

      takeoff{
      }
    }

    waitOnLand{
    }
  }

  sequencer{

    findUnit{
      searchForAir:b=no
      searchForGround:b=yes
      onlyMissionTargets:b=no
      radius:r=100000.0
    }

    selector{
      selectStrategy:t="ordered"

      torpedoTarget{
      }

      bombTarget{
      }

      fighterAttackGround{
      }
    }
  }

  parallel{

    updateTarget{
      searchForAir:b=yes
      onlyMissionTargets:b=no
      radius:r=100000.0
      distanceDifferenceToMaxSpeedRatio:r=9.0
    }

    ifThenElse{

      or{

        isTargetType{
          type:t="fighter"
        }

        isTargetType{
          type:t="bomber"
        }
      }

      selector{

        fighterAttackFighter{
          allowSpeedCheat:b=no
        }
      }

      fighterAttackGround{
      }
    }
  }
}

selector{
  name:t="captureBot"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  selector{
    selectStrategy:t="ordered"
    name:t="taxi_and_takeoff"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="collisionAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    sequencer{

      isOnAirfield{
      }

      findClosestAirfield{
      }

      waitForAirfieldClearance{
      }

      taxiOnAirfield{
      }

      takeoff{
      }
    }

    waitOnLand{
    }
  }

  reaction{
    event:t="almostBeenHit"

    setNodeWithName{
      nodeName:t="doPanic"
    }
  }

  reaction{
    event:t="almostBeenHitFront"

    setNodeWithName{
      nodeName:t="doFrontalPanic"
    }
  }

  sequencer{

    ifThenElse{

      and{

        checkCaptureZone{
          varName:t="zoneToCapture"
          cond:t="landOnly"
        }

        findAirportAtCZ{
          varName:t="zoneToCapture"
        }
      }

      sequencer{

        findApproachPos{
          dist:r=2600.0
        }

        flyToPos{
          speed:r=350.0
          dist:r=1250.0
          minAlt:r=100.0
        }

        findApproachPos{
          dist:r=900.0
        }

        flyToPos{
          speed:r=200.0
          dist:r=350.0
          minAlt:r=20.0
        }

        sequencer{

          reaction{
            event:t="groundAhead"
          }

          reaction{
            event:t="collisionAhead"
          }

          land{
          }

          afterLanding{
          }
        }
      }

      sequencer{

        setCaptureZoneAsDestination{
          varName:t="zoneToCapture"
        }

        flyToPos{
          speed:r=350.0
          dist:r=350.0
          minAlt:r=200.0
        }
      }
    }
  }

  selector{
    name:t="doPanic"

    rollManeuver{
    }

    bellManeuver{
    }

    roll180Man{
    }

    waveout{
    }

    sinus{
    }

    zigzagSplit{
    }
  }

  selector{
    name:t="doFrontalPanic"

    rollManeuver{
    }

    roll180Man{
    }

    sinus{
    }

    turn{
      direction:t="right"
      maxRoll:r=60.0
      extremeElevator:b=yes
      timeToTurn:r=1.3
    }

    turn{
      direction:t="left"
      maxRoll:r=60.0
      extremeElevator:b=yes
      timeToTurn:r=1.3
    }

    turn{
      direction:t="right"
      maxRoll:r=60.0
      extremeElevator:b=yes
      timeToTurn:r=0.4
    }

    turn{
      direction:t="left"
      maxRoll:r=60.0
      extremeElevator:b=yes
      timeToTurn:r=0.4
    }

    turn{
      direction:t="right"
      maxRoll:r=60.0
      extremeElevator:b=yes
      timeToTurn:r=0.5
    }

    turn{
      direction:t="left"
      maxRoll:r=60.0
      extremeElevator:b=yes
      timeToTurn:r=0.5
    }
  }
}

selector{
  name:t="assistCaptureBot"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  selector{
    selectStrategy:t="ordered"
    name:t="taxi_and_takeoff"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="collisionAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    sequencer{

      isOnAirfield{
      }

      findClosestAirfield{
      }

      waitForAirfieldClearance{
      }

      taxiOnAirfield{
      }

      takeoff{
      }
    }

    waitOnLand{
    }
  }

  reaction{
    event:t="almostBeenHit"

    setNodeWithName{
      nodeName:t="doPanic"
    }
  }

  reaction{
    event:t="almostBeenHitFront"

    setNodeWithName{
      nodeName:t="doFrontalPanic"
    }
  }

  setAsLeader{
    varName:t="planeToAssist"
  }

  sequencer{

    reaction{
      event:t="regularCheck"

      sequencer{

        or{

          isTargetDist{
            useTarget:b=no
            op:t="greater"
            dist:r=2000.0
          }

          isTargetDist{
            useTarget:b=yes
            op:t="greater"
            dist:r=2000.0
          }
        }

        recalculateTree{
        }
      }
    }

    isTargetDist{
      useTarget:b=no
      op:t="less"
      dist:r=2000.0
    }

    findUnit{
      searchForAir:b=yes
      onlyMissionTargets:b=no
      radius:r=2000.0
      degreesToCheck:r=50.0
    }

    selector{

      fighterAttackFighter{
        allowSpeedCheat:b=no
      }
    }
  }

  reaction{
    event:t="regularCheck"

    isTargetDist{
      useTarget:b=yes
      op:t="greater"
      dist:r=2000.0
    }

    findUnit{
      searchForAir:b=yes
      onlyMissionTargets:b=no
      radius:r=2000.0
      degreesToCheck:r=50.0
    }

    recalculateTree{
    }
  }

  followTarget{
    offset:p3=-20.0, 10.0, 30.0
    useTarget:b=no
  }

  selector{
    name:t="doPanic"

    rollManeuver{
    }

    bellManeuver{
    }

    roll180Man{
    }

    waveout{
    }

    sinus{
    }

    zigzagSplit{
    }
  }

  selector{
    name:t="doFrontalPanic"

    rollManeuver{
    }

    roll180Man{
    }

    sinus{
    }

    turn{
      direction:t="right"
      maxRoll:r=60.0
      extremeElevator:b=yes
      timeToTurn:r=1.3
    }

    turn{
      direction:t="left"
      maxRoll:r=60.0
      extremeElevator:b=yes
      timeToTurn:r=1.3
    }

    turn{
      direction:t="right"
      maxRoll:r=60.0
      extremeElevator:b=yes
      timeToTurn:r=0.4
    }

    turn{
      direction:t="left"
      maxRoll:r=60.0
      extremeElevator:b=yes
      timeToTurn:r=0.4
    }

    turn{
      direction:t="right"
      maxRoll:r=60.0
      extremeElevator:b=yes
      timeToTurn:r=0.5
    }

    turn{
      direction:t="left"
      maxRoll:r=60.0
      extremeElevator:b=yes
      timeToTurn:r=0.5
    }
  }
}

selector{
  name:t="defenderBot"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  selector{
    selectStrategy:t="ordered"
    name:t="taxi_and_takeoff"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="collisionAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    sequencer{

      isOnAirfield{
      }

      findClosestAirfield{
      }

      waitForAirfieldClearance{
      }

      taxiOnAirfield{
      }

      takeoff{
      }
    }

    waitOnLand{
    }
  }

  reaction{
    event:t="almostBeenHit"

    setNodeWithName{
      nodeName:t="doPanic"
    }
  }

  reaction{
    event:t="almostBeenHitFront"

    setNodeWithName{
      nodeName:t="doFrontalPanic"
    }
  }

  setCaptureZoneAsDestination{
    varName:t="zoneToDefend"
  }

  selector{
    selectStrategy:t="ordered"

    sequencer{

      reaction{
        event:t="regularCheck"

        sequencer{

          or{

            isDistToDest{
              op:t="greater"
              dist:r=4000.0
            }

            isTargetDist{
              useTarget:b=yes
              op:t="greater"
              dist:r=6000.0
            }
          }

          recalculateTree{
          }
        }
      }

      isDistToDest{
        op:t="less"
        dist:r=2000.0
      }

      or{

        findEnemyInZone{
        }

        findUnit{
          searchForAir:b=yes
          onlyMissionTargets:b=no
          radius:r=2000.0
        }
      }

      selector{

        fighterAttackFighter{
          allowSpeedCheat:b=no
        }
      }
    }

    sequencer{

      flyToPos{
        speed:r=750.0
        dist:r=1500.0
        minAlt:r=200.0
        maxTime:r=5.0
      }

      setCaptureZoneAsDestination{
        varName:t="zoneToDefend"
      }

      flyToPos{
        speed:r=260.0
        dist:r=50.0
        minAlt:r=200.0
        maxTime:r=5.0
      }
    }
  }

  selector{
    name:t="doPanic"

    rollManeuver{
    }

    bellManeuver{
    }

    roll180Man{
    }

    waveout{
    }

    sinus{
    }

    zigzagSplit{
    }
  }

  selector{
    name:t="doFrontalPanic"

    rollManeuver{
    }

    roll180Man{
    }

    sinus{
    }

    turn{
      direction:t="right"
      maxRoll:r=60.0
      extremeElevator:b=yes
      timeToTurn:r=1.3
    }

    turn{
      direction:t="left"
      maxRoll:r=60.0
      extremeElevator:b=yes
      timeToTurn:r=1.3
    }

    turn{
      direction:t="right"
      maxRoll:r=60.0
      extremeElevator:b=yes
      timeToTurn:r=0.4
    }

    turn{
      direction:t="left"
      maxRoll:r=60.0
      extremeElevator:b=yes
      timeToTurn:r=0.4
    }

    turn{
      direction:t="right"
      maxRoll:r=60.0
      extremeElevator:b=yes
      timeToTurn:r=0.5
    }

    turn{
      direction:t="left"
      maxRoll:r=60.0
      extremeElevator:b=yes
      timeToTurn:r=0.5
    }
  }
}

selector{
  name:t="seekerBot"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  selector{
    selectStrategy:t="ordered"
    name:t="taxi_and_takeoff"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="collisionAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    sequencer{

      isOnAirfield{
      }

      findClosestAirfield{
      }

      waitForAirfieldClearance{
      }

      taxiOnAirfield{
      }

      takeoff{
      }
    }

    waitOnLand{
    }
  }

  reaction{
    event:t="almostBeenHit"

    setNodeWithName{
      nodeName:t="doPanic"
    }
  }

  reaction{
    event:t="almostBeenHitFront"

    setNodeWithName{
      nodeName:t="doFrontalPanic"
    }
  }

  parallel{

    updateTarget{
      searchForAir:b=yes
      onlyMissionTargets:b=no
      radius:r=200000.0
      distanceDifferenceToMaxSpeedRatio:r=9.0
    }

    ifThenElse{

      or{

        isTargetType{
          type:t="fighter"
        }

        isTargetType{
          type:t="bomber"
        }
      }

      selector{

        fighterAttackFighter{
          allowSpeedCheat:b=no
        }
      }

      fighterAttackGround{
      }
    }
  }

  orbitHere{
    speed:r=260.0
    rollFactor:r=0.2
    alt:r=3000.0
    maxTime:r=10.0
  }

  selector{
    name:t="doPanic"

    rollManeuver{
    }

    bellManeuver{
    }

    roll180Man{
    }

    waveout{
    }

    sinus{
    }

    zigzagSplit{
    }
  }

  selector{
    name:t="doFrontalPanic"

    rollManeuver{
    }

    roll180Man{
    }

    sinus{
    }

    turn{
      direction:t="right"
      maxRoll:r=60.0
      timeToTurn:r=1.3
    }

    turn{
      direction:t="left"
      maxRoll:r=60.0
      timeToTurn:r=1.3
    }

    turn{
      direction:t="right"
      maxRoll:r=60.0
      timeToTurn:r=0.4
    }

    turn{
      direction:t="left"
      maxRoll:r=60.0
      timeToTurn:r=0.4
    }

    turn{
      direction:t="right"
      maxRoll:r=60.0
      timeToTurn:r=0.5
    }

    turn{
      direction:t="left"
      maxRoll:r=60.0
      timeToTurn:r=0.5
    }
  }
}

selector{
  name:t="idleBot"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  selector{
    selectStrategy:t="ordered"
    name:t="taxi_and_takeoff"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="collisionAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    sequencer{

      isOnAirfield{
      }

      findClosestAirfield{
      }

      waitForAirfieldClearance{
      }

      taxiOnAirfield{
      }

      takeoff{
      }
    }

    waitOnLand{
    }
  }

  sequencer{

    findCaptureZone{
      zoneType:t="enemy"
      varName:t="zoneToCapture"
    }

    setCaptureZoneAsDestination{
      varName:t="zoneToCapture"
    }

    flyToPos{
      speed:r=350.0
      dist:r=350.0
      minAlt:r=200.0
    }
  }
}

selector{
  name:t="rearmingBot"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  selector{
    selectStrategy:t="ordered"
    name:t="taxi_and_takeoff"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="collisionAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    sequencer{

      isOnAirfield{
      }

      findClosestAirfield{
      }

      waitForAirfieldClearance{
      }

      taxiOnAirfield{
      }

      takeoff{
      }
    }

    waitOnLand{
    }
  }

  sequencer{

    orbitHere{
      speed:r=260.0
      rollFactor:r=0.2
      alt:r=1500.0
      maxTime:r=60.0
    }

    restore{
      rearm:b=yes
    }
  }
}

selector{
  name:t="tankBot"
  selectStrategy:t="ordered"

  sequencer{

    selector{
      selectStrategy:t="ordered"
      selectOnSuccess:b=yes

      setCapturePointAsDest{
        dist:r=20.0
      }

      selectExplicitDestination{
        minDist:r=20.0
      }
    }

    driveToPos{
      dist:r=10.0
    }
  }
}

selector{
  name:t="shipBot"
  selectStrategy:t="ordered"

  cycle{

    sequencer{

      selector{
        selectStrategy:t="ordered"
        selectOnSuccess:b=yes

        findNextShipWaypoint{
        }

        checkIfShipHasDestination{
        }

        findCapturePointToSail{
          canCapture:b=yes
        }

        shipFollowsTarget{
        }
      }

      sailToPos{
        dist:r=100.0
      }
    }
  }

  stopShipEngine{
  }
}

selector{
  name:t="HLBCapture"
  selectStrategy:t="ordered"

  sequencer{

    listCleaner{
      originalList:t="unsortedPlanes"
      fromList:t="assaultPlanes"
    }

    listCleaner{
      originalList:t="unsortedPlanes"
      fromList:t="capturePlanes"
    }

    listCleaner{
      originalList:t="unsortedPlanes"
      fromList:t="fightingPlanes"
    }

    listCleaner{
      originalList:t="unsortedPlanes"
      fromList:t="otherPlanes"
    }
  }

  sequencer{
    repeat:b=yes

    findPlaneInListCapableOf{
      listName:t="unsortedPlanes"
      planeName:t="assaulter"
      capableOf:t="bombing"
    }

    addToList{
      listName:t="assaultPlanes"
      varName:t="assaulter"
    }

    removeFromList{
      listName:t="unsortedPlanes"
      varName:t="assaulter"
    }

    setBehaviourToPlane{
      planeName:t="assaulter"
      behaviour:t="assaultBot"
    }
  }

  sequencer{
    repeat:b=yes

    findPlaneInListCapableOf{
      listName:t="unsortedPlanes"
      planeName:t="assaulter"
      capableOf:t="torpedoing"
    }

    addToList{
      listName:t="assaultPlanes"
      varName:t="assaulter"
    }

    removeFromList{
      listName:t="unsortedPlanes"
      varName:t="assaulter"
    }

    setBehaviourToPlane{
      planeName:t="assaulter"
      behaviour:t="assaultBot"
    }
  }

  sequencer{
    repeat:b=yes

    findPlaneInListCapableOf{
      listName:t="unsortedPlanes"
      planeName:t="assaulter"
      capableOf:t="rocket_attack"
    }

    addToList{
      listName:t="assaultPlanes"
      varName:t="assaulter"
    }

    removeFromList{
      listName:t="unsortedPlanes"
      varName:t="assaulter"
    }

    setBehaviourToPlane{
      planeName:t="assaulter"
      behaviour:t="assaultBot"
    }
  }

  clearIdList{
    listName:t="zonesToCapture"
  }

  clearIdList{
    listName:t="zonesToDefend"
  }

  setVarTo{
    varName:t="enemyCZAfter"
    val:i=-1
  }

  sequencer{
    repeat:b=yes

    findCaptureZoneHighLevel{
      czName:t="enemyCZ"
      friendly:b=no
      afterName:t="enemyCZAfter"
    }

    setVarTo{
      varName:t="capturerAfter"
      val:i=-1
    }

    setVarTo{
      varName:t="alreadyCapturing"
      val:i=0
    }

    sequencer{
      repeat:b=yes

      getFromList{
        listName:t="capturePlanes"
        varName:t="capturer"
        indexType:t="first"
        afterName:t="capturerAfter"
      }

      getVarIndex{
        listName:t="capturePlanes"
        varName:t="capturer"
        toName:t="capturerAfter"
      }

      ifThenElse{

        isBotVarEqual{
          planeName:t="capturer"
          varName:t="enemyCZ"
          botVarName:t="zoneToCapture"
        }

        not{

          setVarTo{
            varName:t="alreadyCapturing"
            val:i=1
          }
        }

        continue{
        }
      }
    }

    setVarTo{
      fromVar:t="enemyCZ"
      varName:t="enemyCZAfter"
    }

    ifThenElse{

      compareVar{
        varName:t="alreadyCapturing"
        value:i=0
        op:t="equal"
      }

      addToList{
        listName:t="zonesToCapture"
        varName:t="enemyCZ"
      }

      continue{
      }
    }
  }

  setVarTo{
    varName:t="friendlyCZAfter"
    val:i=-1
  }

  sequencer{
    repeat:b=yes

    findCaptureZoneHighLevel{
      czName:t="friendlyCZ"
      friendly:b=yes
      afterName:t="friendlyCZAfter"
    }

    addToList{
      listName:t="zonesToDefend"
      varName:t="friendlyCZ"
    }

    setVarTo{
      fromVar:t="friendlyCZ"
      varName:t="friendlyCZAfter"
    }
  }

  sequencer{
    repeat:b=yes

    findPlaneInListCapableOf{
      listName:t="unsortedPlanes"
      planeName:t="fighter"
      capableOf:t="dog_fight"
    }

    addToList{
      listName:t="fightingPlanes"
      varName:t="fighter"
    }

    removeFromList{
      listName:t="unsortedPlanes"
      varName:t="fighter"
    }
  }

  sequencer{
    repeat:b=yes

    findPlaneInListCapableOf{
      listName:t="unsortedPlanes"
      planeName:t="assaulter"
      capableOf:t="cannon_attack"
    }

    addToList{
      listName:t="assaultPlanes"
      varName:t="assaulter"
    }

    removeFromList{
      listName:t="unsortedPlanes"
      varName:t="assaulter"
    }

    setBehaviourToPlane{
      planeName:t="assaulter"
      behaviour:t="assaultBot"
    }
  }

  sequencer{
    repeat:b=yes

    getFromList{
      listName:t="fightingPlanes"
      varName:t="capturer"
      indexType:t="random"
    }

    getClosestCZToPlane{
      listName:t="zonesToCapture"
      planeName:t="capturer"
      varName:t="closestZone"
    }

    removeFromList{
      listName:t="zonesToCapture"
      varName:t="closestZone"
    }

    removeFromList{
      listName:t="fightingPlanes"
      varName:t="capturer"
    }

    addToList{
      listName:t="capturePlanes"
      varName:t="capturer"
    }

    setBehaviourToPlane{
      planeName:t="capturer"
      behaviour:t="captureBot"
    }

    setBotVarTo{
      planeName:t="capturer"
      fromVar:t="closestZone"
      toVar:t="zoneToCapture"
    }

    getFromList{
      listName:t="fightingPlanes"
      varName:t="assister"
      indexType:t="random"
    }

    removeFromList{
      listName:t="fightingPlanes"
      varName:t="assister"
    }

    setBehaviourToPlane{
      planeName:t="assister"
      behaviour:t="assistCaptureBot"
    }

    setBotVarTo{
      planeName:t="assister"
      fromVar:t="capturer"
      toVar:t="planeToAssist"
    }
  }

  sequencer{
    repeat:b=yes

    getFromList{
      listName:t="fightingPlanes"
      varName:t="defender"
      indexType:t="random"
    }

    getClosestCZToPlane{
      listName:t="zonesToDefend"
      planeName:t="defender"
      varName:t="closestZone"
    }

    removeFromList{
      listName:t="zonesToDefend"
      varName:t="closestZone"
    }

    removeFromList{
      listName:t="fightingPlanes"
      varName:t="defender"
    }

    setBehaviourToPlane{
      planeName:t="defender"
      behaviour:t="defenderBot"
    }

    setBotVarTo{
      planeName:t="defender"
      fromVar:t="closestZone"
      toVar:t="zoneToDefend"
    }
  }

  sequencer{
    repeat:b=yes

    findPlaneInListCapableOf{
      listName:t="fightingPlanes"
      planeName:t="seeker"
      capableOf:t="fighting"
    }

    removeFromList{
      listName:t="fightingPlanes"
      varName:t="seeker"
    }

    setMissionRank{
      varName:t="missionRank"
    }

    ifThenElse{

      compareVar{
        varName:t="missionRank"
        op:t="equal"
        value:i=1
      }

      setBehaviourToPlane{
        planeName:t="seeker"
        behaviour:t="defaultCTABot"
      }

      setBehaviourToPlane{
        planeName:t="seeker"
        behaviour:t="seekerBot"
      }
    }
  }

  sequencer{
    repeat:b=yes

    findPlaneInListCapableOf{
      listName:t="fightingPlanes"
      planeName:t="assaulter"
      capableOf:t="cannon_attack"
    }

    removeFromList{
      listName:t="fightingPlanes"
      varName:t="assaulter"
    }

    setBehaviourToPlane{
      planeName:t="assaulter"
      behaviour:t="assaultBot"
    }
  }

  sequencer{
    repeat:b=yes

    findPlaneInListCapableOf{
      listName:t="fightingPlanes"
      planeName:t="other"
      capableOf:t="rearming"
    }

    addToList{
      listName:t="otherPlanes"
      varName:t="other"
    }

    removeFromList{
      listName:t="fightingPlanes"
      varName:t="other"
    }

    setBehaviourToPlane{
      planeName:t="other"
      behaviour:t="rearmingBot"
    }
  }

  sequencer{
    repeat:b=yes

    getFromList{
      listName:t="unsortedPlanes"
      varName:t="other"
      indexType:t="last"
    }

    addToList{
      listName:t="otherPlanes"
      varName:t="other"
    }

    removeFromList{
      listName:t="unsortedPlanes"
      varName:t="other"
    }

    setBehaviourToPlane{
      planeName:t="other"
      behaviour:t="rearmingBot"
    }
  }
}

selector{
  name:t="missionFighter"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  selector{
    selectStrategy:t="ordered"
    name:t="taxi_and_takeoff"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="collisionAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    sequencer{

      isOnAirfield{
      }

      findClosestAirfield{
      }

      waitForAirfieldClearance{
      }

      taxiOnAirfield{
      }

      takeoff{
      }
    }

    waitOnLand{
    }
  }

  sequencer{
    repeat:b=yes

    reaction{
      event:t="almostBeenHit"

      setNodeWithName{
        nodeName:t="doPanic"
      }
    }

    reaction{
      event:t="almostBeenHitFront"

      setNodeWithName{
        nodeName:t="doFrontalPanic"
      }
    }

    stayInFightArea{
    }

    reaction{
      event:t="regularCheck"

      sequencer{

        not{

          isInOuterFightArea{
          }
        }

        recalculateTree{
        }
      }
    }

    clearTargetList{
      listName:t="targets"
    }

    ifThenElse{

      and{

        not{

          isUnitDead{
            unitName:t="specialTarget"
          }
        }

        setAsTarget{
          varName:t="specialTarget"
        }
      }

      copyVarTo{
        from:t="specialTarget"
        to:t="currentTarget"
      }

      ifThenElse{

        isIndependentAttacker{
        }

        getTargetFromList{
          listName:t="targets"
          varName:t="currentTarget"
        }

        parallel{

          cycle{

            findLeader{
            }
          }

          getTargetFromListAfterLeader{
            listName:t="targets"
            varName:t="currentTarget"
          }

          followTarget{
            offsetFromBot:b=yes
            useTarget:b=no
          }
        }
      }
    }

    setAsTarget{
      varName:t="currentTarget"
    }

    selector{
      selectStrategy:t="ordered"

      sequencer{

        isTargetType{
          type:t="fighter"
        }

        selector{
          selectStrategy:t="ordered"

          energyAttack{
          }

          fighterAttackFighter{
          }
        }
      }

      sequencer{

        isTargetType{
          type:t="bomber"
        }

        fighterAttackBomber{
        }
      }

      selector{
        selectStrategy:t="ordered"

        diveBombTarget{
        }

        sequencer{

          not{

            ifThenElse{

              hasDependentAttackers{
              }

              selector{
                selectStrategy:t="ordered"

                fighterAttackGround{
                }

                parallel{

                  cycle{

                    hasGroupWeaponForTarget{
                    }
                  }

                  attackGroundFake{
                  }
                }
              }

              fighterAttackGround{
              }
            }
          }

          selector{

            spiralUp{
              time:r=5.0
            }

            flyToPlane{
              dist:r=800.0
            }
          }
        }
      }
    }
  }

  resetTarget{
  }

  sequencer{

    reaction{
      event:t="outsideBattleField"
    }

    ifThenElse{

      findLeader{
      }

      followTarget{
        offsetFromBot:b=yes
        useTarget:b=no
      }

      selector{
        selectStrategy:t="ordered"

        sequencer{

          setControls{
            controls:t="flaps"
            setTo:r=0.0
            timeTo:r=0.0
          }

          flyToPos{
            speed:r=350.0
            dist:r=-1.0
            minAlt:r=10.0
          }
        }

        waypointFollow{
        }
      }
    }
  }

  sequencer{
    name:t="unitLandOnAirfield"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    land{
    }

    afterLanding{
    }
  }

  selector{
    name:t="doPanic"

    rollManeuver{
    }

    bellManeuver{
    }

    roll180Man{
    }

    waveout{
    }

    sinus{
    }

    zigzagSplit{
    }

    turn{
      direction:t="right"
      extremeElevator:b=yes
      timeToTurn:r=1.3
    }

    turn{
      direction:t="left"
      extremeElevator:b=yes
      timeToTurn:r=1.3
    }

    turn{
      direction:t="right"
      extremeElevator:b=yes
      timeToTurn:r=0.4
    }

    turn{
      direction:t="left"
      extremeElevator:b=yes
      timeToTurn:r=0.4
    }

    turn{
      direction:t="right"
      extremeElevator:b=yes
      timeToTurn:r=0.5
    }

    turn{
      direction:t="left"
      extremeElevator:b=yes
      timeToTurn:r=0.5
    }
  }

  selector{
    name:t="doFrontalPanic"

    rollManeuver{
    }

    roll180Man{
    }

    sinus{
    }

    turn{
      direction:t="right"
      extremeElevator:b=yes
      timeToTurn:r=1.3
    }

    turn{
      direction:t="left"
      extremeElevator:b=yes
      timeToTurn:r=1.3
    }

    turn{
      direction:t="right"
      extremeElevator:b=yes
      timeToTurn:r=0.4
    }

    turn{
      direction:t="left"
      extremeElevator:b=yes
      timeToTurn:r=0.4
    }

    turn{
      direction:t="right"
      extremeElevator:b=yes
      timeToTurn:r=0.5
    }

    turn{
      direction:t="left"
      extremeElevator:b=yes
      timeToTurn:r=0.5
    }
  }
}

selector{
  name:t="missionBomber"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  selector{
    selectStrategy:t="ordered"
    name:t="taxi_and_takeoff"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="collisionAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    sequencer{

      isOnAirfield{
      }

      findClosestAirfield{
      }

      waitForAirfieldClearance{
      }

      taxiOnAirfield{
      }

      takeoff{
      }
    }

    waitOnLand{
    }
  }

  sequencer{

    clearTargetList{
      listName:t="targets"
    }

    ifThenElse{

      isIndependentAttacker{
      }

      ifThenElse{

        isRandomTargets{
        }

        getFromListBTB{
          listName:t="targets"
          varName:t="currentTarget"
          indexType:t="random"
        }

        getFromListBTB{
          listName:t="targets"
          varName:t="currentTarget"
          indexType:t="first"
        }
      }

      parallel{

        cycle{

          findLeader{
          }
        }

        getFromListBTBAfterLeader{
          listName:t="targets"
          varName:t="currentTarget"
        }

        followTarget{
          offsetFromBot:b=yes
          useTarget:b=no
        }
      }
    }

    setAsTarget{
      varName:t="currentTarget"
    }

    selector{
      selectStrategy:t="ordered"
      selectOnSuccess:b=yes

      sequencer{

        isTargetType{
          type:t="fighter"
        }
      }

      sequencer{

        isTargetType{
          type:t="bomber"
        }
      }

      sequencer{

        isTargetType{
          type:t="bigShip"
        }

        selector{
          selectStrategy:t="ordered"

          torpedoTarget{
          }

          bombTarget{
          }

          airDropDelivery{
          }

          ifThenElse{

            hasDependentAttackers{
            }

            selector{
              selectStrategy:t="ordered"

              sequencer{

                isAuxWeaponAllowed{
                }

                fighterAttackGround{
                }
              }

              parallel{

                cycle{

                  hasGroupWeaponForTarget{
                    checkAuxWeapon:b=yes
                  }
                }

                attackGroundFake{
                }
              }
            }

            sequencer{

              isAuxWeaponAllowed{
              }

              fighterAttackGround{
              }
            }
          }
        }
      }

      sequencer{

        selector{
          selectStrategy:t="ordered"

          bombTarget{
          }

          airDropDelivery{
          }

          ifThenElse{

            hasDependentAttackers{
            }

            selector{
              selectStrategy:t="ordered"

              sequencer{

                isAuxWeaponAllowed{
                }

                fighterAttackGround{
                }
              }

              parallel{

                cycle{

                  hasGroupWeaponForTarget{
                    checkAuxWeapon:b=yes
                  }
                }

                attackGroundFake{
                }
              }
            }

            sequencer{

              isAuxWeaponAllowed{
              }

              fighterAttackGround{
              }
            }
          }
        }
      }
    }
  }

  resetTarget{
  }

  sequencer{

    reaction{
      event:t="outsideBattleField"
    }

    ifThenElse{

      findLeader{
      }

      followTarget{
        offsetFromBot:b=yes
        useTarget:b=no
      }

      selector{
        selectStrategy:t="ordered"

        sequencer{

          setControls{
            controls:t="flaps"
            setTo:r=0.0
            timeTo:r=0.0
          }

          flyToPos{
            speed:r=350.0
            dist:r=-1.0
            minAlt:r=10.0
          }
        }

        waypointFollow{
        }
      }
    }
  }

  sequencer{
    name:t="unitLandOnAirfield"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    land{
    }

    afterLanding{
    }
  }
}

selector{
  name:t="missionAssault"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  selector{
    selectStrategy:t="ordered"
    name:t="taxi_and_takeoff"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="collisionAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    sequencer{

      isOnAirfield{
      }

      findClosestAirfield{
      }

      waitForAirfieldClearance{
      }

      taxiOnAirfield{
      }

      takeoff{
      }
    }

    waitOnLand{
    }
  }

  sequencer{

    clearTargetList{
      listName:t="targets"
    }

    ifThenElse{

      isIndependentAttacker{
      }

      ifThenElse{

        isRandomTargets{
        }

        getFromListBTB{
          listName:t="targets"
          varName:t="currentTarget"
          indexType:t="random"
        }

        getFromListBTB{
          listName:t="targets"
          varName:t="currentTarget"
          indexType:t="first"
        }
      }

      parallel{

        cycle{

          findLeader{
          }
        }

        getFromListBTBAfterLeader{
          listName:t="targets"
          varName:t="currentTarget"
        }

        followTarget{
          offsetFromBot:b=yes
          useTarget:b=no
        }
      }
    }

    setAsTarget{
      varName:t="currentTarget"
    }

    selector{
      selectStrategy:t="ordered"

      sequencer{

        isTargetType{
          type:t="fighter"
        }

        fighterAttackFighter{
        }
      }

      sequencer{

        isTargetType{
          type:t="bomber"
        }

        fighterAttackBomber{
        }
      }

      sequencer{

        isTargetType{
          type:t="bigShip"
        }

        selector{
          selectStrategy:t="ordered"

          torpedoTarget{
          }

          diveBombTarget{
          }

          bombTarget{
          }

          ifThenElse{

            hasDependentAttackers{
            }

            selector{
              selectStrategy:t="ordered"

              fighterAttackGround{
              }

              parallel{

                cycle{

                  hasGroupWeaponForTarget{
                  }
                }

                attackGroundFake{
                }
              }
            }

            fighterAttackGround{
            }
          }
        }
      }

      sequencer{

        selector{
          selectStrategy:t="ordered"

          diveBombTarget{
          }

          bombTarget{
          }

          ifThenElse{

            hasDependentAttackers{
            }

            selector{
              selectStrategy:t="ordered"

              fighterAttackGround{
              }

              parallel{

                cycle{

                  hasGroupWeaponForTarget{
                  }
                }

                attackGroundFake{
                }
              }
            }

            fighterAttackGround{
            }
          }
        }
      }
    }
  }

  resetTarget{
  }

  sequencer{

    reaction{
      event:t="outsideBattleField"
    }

    ifThenElse{

      findLeader{
      }

      followTarget{
        offsetFromBot:b=yes
        useTarget:b=no
      }

      selector{
        selectStrategy:t="ordered"

        sequencer{

          setControls{
            controls:t="flaps"
            setTo:r=0.0
            timeTo:r=0.0
          }

          flyToPos{
            speed:r=350.0
            dist:r=-1.0
            minAlt:r=10.0
          }
        }

        waypointFollow{
        }
      }
    }
  }

  sequencer{
    name:t="unitLandOnAirfield"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    land{
    }

    afterLanding{
    }
  }
}

selector{
  name:t="diveBomber"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  selector{
    selectStrategy:t="ordered"
    name:t="taxi_and_takeoff"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="collisionAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    sequencer{

      isOnAirfield{
      }

      findClosestAirfield{
      }

      waitForAirfieldClearance{
      }

      taxiOnAirfield{
      }

      takeoff{
      }
    }

    waitOnLand{
    }
  }

  sequencer{

    clearTargetList{
      listName:t="targets"
    }

    ifThenElse{

      isIndependentAttacker{
      }

      ifThenElse{

        isRandomTargets{
        }

        getFromListBTB{
          listName:t="targets"
          varName:t="currentTarget"
          indexType:t="random"
        }

        getFromListBTB{
          listName:t="targets"
          varName:t="currentTarget"
          indexType:t="first"
        }
      }

      parallel{

        cycle{

          findLeader{
          }
        }

        getFromListBTBAfterLeader{
          listName:t="targets"
          varName:t="currentTarget"
        }

        followTarget{
          offsetFromBot:b=yes
          useTarget:b=no
        }
      }
    }

    setAsTarget{
      varName:t="currentTarget"
    }

    selector{
      selectStrategy:t="ordered"
      selectOnSuccess:b=yes

      sequencer{

        isTargetType{
          type:t="fighter"
        }
      }

      sequencer{

        isTargetType{
          type:t="bomber"
        }
      }

      sequencer{

        isTargetType{
          type:t="bigShip"
        }

        selector{
          selectStrategy:t="ordered"

          torpedoTarget{
          }

          diveBombTarget{
          }

          bombTarget{
          }

          ifThenElse{

            hasDependentAttackers{
            }

            selector{
              selectStrategy:t="ordered"

              sequencer{

                isAuxWeaponAllowed{
                }

                fighterAttackGround{
                }
              }

              parallel{

                cycle{

                  hasGroupWeaponForTarget{
                    checkAuxWeapon:b=yes
                  }
                }

                attackGroundFake{
                }
              }
            }

            sequencer{

              isAuxWeaponAllowed{
              }

              fighterAttackGround{
              }
            }
          }
        }
      }

      sequencer{

        selector{
          selectStrategy:t="ordered"

          diveBombTarget{
          }

          bombTarget{
          }

          ifThenElse{

            hasDependentAttackers{
            }

            selector{
              selectStrategy:t="ordered"

              sequencer{

                isAuxWeaponAllowed{
                }

                fighterAttackGround{
                }
              }

              parallel{

                cycle{

                  hasGroupWeaponForTarget{
                    checkAuxWeapon:b=yes
                  }
                }

                attackGroundFake{
                }
              }
            }

            sequencer{

              isAuxWeaponAllowed{
              }

              fighterAttackGround{
              }
            }
          }
        }
      }
    }
  }

  resetTarget{
  }

  sequencer{

    reaction{
      event:t="outsideBattleField"
    }

    ifThenElse{

      findLeader{
      }

      followTarget{
        offsetFromBot:b=yes
        useTarget:b=no
      }

      selector{
        selectStrategy:t="ordered"

        sequencer{

          setControls{
            controls:t="flaps"
            setTo:r=0.0
            timeTo:r=0.0
          }

          flyToPos{
            speed:r=350.0
            dist:r=-1.0
            minAlt:r=10.0
          }
        }

        waypointFollow{
        }
      }
    }
  }

  sequencer{
    name:t="unitLandOnAirfield"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    land{
    }

    afterLanding{
    }
  }
}

selector{
  name:t="missionTransport"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  selector{
    selectStrategy:t="ordered"
    name:t="taxi_and_takeoff"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="collisionAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    sequencer{

      isOnAirfield{
      }

      findClosestAirfield{
      }

      waitForAirfieldClearance{
      }

      taxiOnAirfield{
      }

      takeoff{
      }
    }

    waitOnLand{
    }
  }

  sequencer{

    clearTargetList{
      listName:t="targets"
    }

    ifThenElse{

      isRandomTargets{
      }

      getFromListBTB{
        listName:t="targets"
        varName:t="currentTarget"
        indexType:t="random"
      }

      getFromListBTB{
        listName:t="targets"
        varName:t="currentTarget"
        indexType:t="first"
      }
    }

    setAsTarget{
      varName:t="currentTarget"
    }

    selector{
      selectStrategy:t="ordered"
      selectOnSuccess:b=yes

      sequencer{

        isTargetType{
          type:t="fighter"
        }
      }

      sequencer{

        isTargetType{
          type:t="bomber"
        }
      }

      sequencer{

        isTargetType{
          type:t="bigShip"
        }

        selector{
          selectStrategy:t="ordered"

          torpedoTarget{
          }

          bombTarget{
          }
        }
      }

      bombTarget{
      }

      airDropDelivery{
      }
    }
  }

  sequencer{

    reaction{
      event:t="outsideBattleField"
    }

    ifThenElse{

      findLeader{
      }

      followTarget{
        offsetFromBot:b=yes
        useTarget:b=no
      }

      selector{
        selectStrategy:t="ordered"

        sequencer{

          setControls{
            controls:t="flaps"
            setTo:r=0.0
            timeTo:r=0.0
          }

          flyToPos{
            speed:r=350.0
            dist:r=-1.0
            minAlt:r=10.0
          }
        }

        waypointFollow{
        }
      }
    }
  }

  sequencer{
    name:t="unitLandOnAirfield"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    land{
    }

    afterLanding{
    }
  }
}

selector{
  name:t="missionKamikaze"
  selectStrategy:t="ordered"

  sequencer{

    clearTargetList{
      listName:t="targets"
    }

    ifThenElse{

      isRandomTargets{
      }

      getFromListBTB{
        listName:t="targets"
        varName:t="currentTarget"
        indexType:t="random"
      }

      getFromListBTB{
        listName:t="targets"
        varName:t="currentTarget"
        indexType:t="first"
      }
    }

    setAsTarget{
      varName:t="currentTarget"
    }

    selector{
      selectStrategy:t="ordered"

      kamikazeAttack{
      }
    }
  }

  sequencer{

    reaction{
      event:t="outsideBattleField"
    }

    ifThenElse{

      findLeader{
      }

      followTarget{
        offsetFromBot:b=yes
        useTarget:b=no
      }

      selector{
        selectStrategy:t="ordered"

        sequencer{

          setControls{
            controls:t="flaps"
            setTo:r=0.0
            timeTo:r=0.0
          }

          flyToPos{
            speed:r=350.0
            dist:r=-1.0
            minAlt:r=10.0
          }
        }

        waypointFollow{
        }
      }
    }
  }
}

selector{
  name:t="missionRacer"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  selector{
    selectStrategy:t="ordered"
    name:t="taxi_and_takeoff"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="collisionAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    sequencer{

      isOnAirfield{
      }

      findClosestAirfield{
      }

      waitForAirfieldClearance{
      }

      taxiOnAirfield{
      }

      takeoff{
      }
    }

    waitOnLand{
    }
  }

  sequencer{

    reaction{
      event:t="outsideBattleField"
    }

    ifThenElse{

      findLeader{
      }

      followTarget{
        offsetFromBot:b=yes
        useTarget:b=no
      }

      selector{
        selectStrategy:t="ordered"

        sequencer{

          setControls{
            controls:t="flaps"
            setTo:r=0.0
            timeTo:r=0.0
          }

          flyToPos{
            speed:r=350.0
            dist:r=-1.0
            minAlt:r=10.0
          }
        }

        waypointFollow{
          maxRoll:r=90.0
          maxPitch:r=80.0
          aggressiveness:r=5.0
        }
      }
    }
  }

  sequencer{
    name:t="unitLandOnAirfield"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    land{
    }

    afterLanding{
    }
  }
}

selector{
  name:t="missionHitThePoint"
  selectStrategy:t="ordered"

  hitThePoint{
  }
}

selector{
  name:t="missionAssault_torpedo_all"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  selector{
    selectStrategy:t="ordered"
    name:t="taxi_and_takeoff"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="collisionAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    sequencer{

      isOnAirfield{
      }

      findClosestAirfield{
      }

      waitForAirfieldClearance{
      }

      taxiOnAirfield{
      }

      takeoff{
      }
    }

    waitOnLand{
    }
  }

  sequencer{

    clearTargetList{
      listName:t="targets"
    }

    ifThenElse{

      isRandomTargets{
      }

      getFromListBTB{
        listName:t="targets"
        varName:t="currentTarget"
        indexType:t="random"
      }

      getFromListBTB{
        listName:t="targets"
        varName:t="currentTarget"
        indexType:t="first"
      }
    }

    setAsTarget{
      varName:t="currentTarget"
    }

    selector{
      selectStrategy:t="ordered"
      selectOnSuccess:b=yes

      sequencer{

        isTargetType{
          type:t="fighter"
        }
      }

      sequencer{

        isTargetType{
          type:t="bomber"
        }
      }

      sequencer{

        selector{
          selectStrategy:t="ordered"

          torpedoTarget{
          }

          diveBombTarget{
          }

          bombTarget{
          }

          fighterAttackGround{
          }

          spiralUp{
          }
        }
      }
    }
  }

  sequencer{

    reaction{
      event:t="outsideBattleField"
    }

    ifThenElse{

      findLeader{
      }

      followTarget{
        offsetFromBot:b=yes
        useTarget:b=no
      }

      selector{
        selectStrategy:t="ordered"

        sequencer{

          setControls{
            controls:t="flaps"
            setTo:r=0.0
            timeTo:r=0.0
          }

          flyToPos{
            speed:r=350.0
            dist:r=-1.0
            minAlt:r=10.0
          }
        }

        waypointFollow{
        }
      }
    }
  }

  sequencer{
    name:t="unitLandOnAirfield"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    land{
    }

    afterLanding{
    }
  }
}

selector{
  name:t="missionAssaultT"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  selector{
    selectStrategy:t="ordered"
    name:t="taxi_and_takeoff"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="collisionAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    sequencer{

      isOnAirfield{
      }

      findClosestAirfield{
      }

      waitForAirfieldClearance{
      }

      taxiOnAirfield{
      }

      takeoff{
      }
    }

    waitOnLand{
    }
  }

  sequencer{

    clearTargetList{
      listName:t="targets"
    }

    ifThenElse{

      isRandomTargets{
      }

      getFromListBTB{
        listName:t="targets"
        varName:t="currentTarget"
        indexType:t="random"
      }

      getFromListBTB{
        listName:t="targets"
        varName:t="currentTarget"
        indexType:t="first"
      }
    }

    setAsTarget{
      varName:t="currentTarget"
    }

    selector{
      selectStrategy:t="ordered"
      selectOnSuccess:b=yes

      sequencer{

        isTargetType{
          type:t="fighter"
        }
      }

      sequencer{

        isTargetType{
          type:t="bomber"
        }
      }

      sequencer{

        isTargetType{
          type:t="bigShip"
        }

        selector{
          selectStrategy:t="ordered"

          torpedoTarget{
          }

          diveBombTarget{
          }

          bombTarget{
          }

          fighterAttackGround{
          }
        }
      }

      sequencer{

        selector{
          selectStrategy:t="ordered"

          diveBombTarget{
          }

          bombTarget{
          }

          fighterAttackGround{
          }
        }
      }
    }
  }

  sequencer{

    reaction{
      event:t="outsideBattleField"
    }

    ifThenElse{

      findLeader{
      }

      followTarget{
        offsetFromBot:b=yes
        useTarget:b=no
      }

      selector{
        selectStrategy:t="ordered"

        sequencer{

          setControls{
            controls:t="flaps"
            setTo:r=0.0
            timeTo:r=0.0
          }

          flyToPos{
            speed:r=350.0
            dist:r=-1.0
            minAlt:r=10.0
          }
        }

        waypointFollow{
        }
      }
    }
  }

  sequencer{
    name:t="unitLandOnAirfield"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    land{
    }

    afterLanding{
    }
  }
}

selector{
  name:t="cutsceneFighterVsFighter"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  fighterAttackFighter{
  }
}

selector{
  name:t="cutsceneFighterVsBomber"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  fighterAttackBomber{
  }
}

selector{
  name:t="cutsceneDiveBombTarget"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  diveBombTarget{
    overrideDropHeight:r=100.0
    overrideDiveSpeed:r=70.0
  }
}

selector{
  name:t="testFighterVsFighter"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  sequencer{

    findUnit{
      searchForAir:b=yes
      onlyMissionTargets:b=no
      radius:r=100000.0
    }

    energyAttack{
      allowSpeedCheat:b=no
    }
  }
}

selector{
  name:t="testFighterVsFighterDM"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  sequencer{

    findUnit{
      searchForAir:b=yes
      onlyMissionTargets:b=no
      radius:r=100000.0
    }

    fighterAttackFighter{
      allowSpeedCheat:b=no
      avoidCollisions:b=no
      ignoreDistance:b=yes
    }
  }
}

selector{
  name:t="missionTargetEliminator"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  selector{
    selectStrategy:t="ordered"
    name:t="taxi_and_takeoff"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="collisionAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    sequencer{

      isOnAirfield{
      }

      findClosestAirfield{
      }

      waitForAirfieldClearance{
      }

      taxiOnAirfield{
      }

      takeoff{
      }
    }

    waitOnLand{
    }
  }

  sequencer{

    findUnit{
      searchForAir:b=yes
      onlyMissionTargets:b=yes
      radius:r=100000.0
    }

    fighterAttackFighter{
    }
  }

  sequencer{

    findUnit{
      searchForGround:b=yes
      onlyMissionTargets:b=yes
      radius:r=100000.0
    }

    sequencer{

      selector{
        selectStrategy:t="ordered"

        diveBombTarget{
        }

        bombTarget{
        }

        fighterAttackGround{
        }
      }

      sequencer{

        reaction{
          event:t="regularCheck"

          recalculateTree{
          }
        }

        spiralUp{
          spiralHorVertOffset:p2=8.0, 8.0
        }
      }
    }
  }

  sequencer{

    reaction{
      event:t="regularCheck"

      recalculateTree{
      }
    }

    findWaypoint{
    }

    flyToPos{
      speed:r=350.0
      dist:r=50.0
      minAlt:r=20.0
    }
  }

  sequencer{

    reaction{
      event:t="regularCheck"

      recalculateTree{
      }
    }

    findUnit{
      searchForAir:b=yes
      onlyMissionTargets:b=yes
      enemy:b=no
      radius:r=100000.0
    }

    selector{
      selectStrategy:t="ordered"

      sequencer{

        isTargetDist{
          op:t="less"
          value:r=3000.0
        }

        findUnit{
          searchForAir:b=yes
          onlyMissionTargets:b=no
          enemy:b=yes
          radius:r=10000.0
        }

        fighterAttackFighter{
        }
      }

      followTarget{
      }
    }
  }

  sequencer{

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="collisionAhead"
    }

    findClosestAirfield{
      onlyFriendly:b=yes
      onlyMissionTargets:b=yes
    }

    land{
    }

    afterLanding{
    }

    recalculateTree{
    }
  }

  sequencer{

    reaction{
      event:t="regularCheck"

      recalculateTree{
      }
    }

    findUnit{
      searchForAir:b=yes
      onlyMissionTargets:b=no
      radius:r=100000.0
    }

    fighterAttackFighter{
    }
  }

  sequencer{

    findUnit{
      searchForGround:b=yes
      onlyMissionTargets:b=no
      radius:r=10000.0
    }

    sequencer{

      fighterAttackGround{
      }

      sequencer{

        reaction{
          event:t="regularCheck"

          recalculateTree{
          }
        }

        spiralUp{
          spiralHorVertOffset:p2=8.0, 8.0
        }
      }
    }
  }

  sequencer{

    reaction{
      event:t="regularCheck"

      recalculateTree{
      }
    }

    parallel{

      stayAtAlt{
        alt:r=3000.0
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }
}

selector{
  name:t="collisionAvoidance"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    climbManeuver{
      alt:r=3000.0
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }
}

selector{
  name:t="coopBot"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  selector{
    selectStrategy:t="ordered"
    name:t="taxi_and_takeoff"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="collisionAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    sequencer{

      isOnAirfield{
      }

      findClosestAirfield{
      }

      waitForAirfieldClearance{
      }

      taxiOnAirfield{
      }

      takeoff{
      }
    }

    waitOnLand{
    }
  }

  sequencer{
    name:t="seq-attackAirTarget"

    reaction{
      event:t="regularCheck"

      sequencer{

        or{

          isTargetDist{
            useTarget:b=no
            op:t="greater"
            dist:r=4000.0
          }

          isTargetDist{
            useTarget:b=yes
            op:t="greater"
            dist:r=4000.0
          }
        }

        recalculateTree{
        }
      }
    }

    isTargetDist{
      useTarget:b=no
      op:t="less"
      dist:r=2000.0
    }

    findUnit{
      searchForAir:b=yes
      onlyMissionTargets:b=no
      radius:r=2000.0
      wingmenAttack:b=yes
    }

    fighterAttackFighter{
    }
  }

  sequencer{
    name:t="seq-attackGroundTarget"

    reaction{
      event:t="regularCheck"

      sequencer{

        or{

          isTargetDist{
            useTarget:b=no
            op:t="greater"
            dist:r=6000.0
          }

          isTargetDist{
            useTarget:b=yes
            op:t="greater"
            dist:r=5000.0
          }
        }

        recalculateTree{
        }
      }
    }

    isTargetDist{
      useTarget:b=no
      op:t="less"
      dist:r=4000.0
    }

    findUnit{
      searchForGround:b=yes
      onlyMissionTargets:b=no
      radius:r=3000.0
      degreesToCheck:r=60.0
      wingmenAttack:b=yes
    }

    selector{
      selectStrategy:t="ordered"

      diveBombTarget{
        wingmenAttack:b=yes
      }

      bombTarget{
        wingmenAttack:b=yes
      }

      fighterAttackGround{
        wingmenAttack:b=yes
      }
    }
  }

  sequencer{
    name:t="seq-followLeader"

    reaction{
      event:t="regularCheck"

      recalculateTree{
      }
    }

    reaction{
      event:t="groundAhead"

      parallel{

        setControls{
          controls:t="power"
          setTo:r=1.1
          timeTo:r=100500.0
        }

        climbManeuver{
          alt:r=3000.0
        }
      }
    }

    findLeader{
    }

    followTarget{
      useTarget:b=no
      offsetFromBot:b=yes
      cheatSpeed:b=yes
    }
  }

  sequencer{
    name:t="seq-defaultFlight"

    reaction{
      event:t="regularCheck"

      recalculateTree{
      }
    }

    parallel{

      stayAtAlt{
        alt:r=3000.0
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }
}

selector{
  name:t="coopBotAttempt"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  selector{
    selectStrategy:t="ordered"
    name:t="taxi_and_takeoff"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="collisionAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    sequencer{

      isOnAirfield{
      }

      findClosestAirfield{
      }

      waitForAirfieldClearance{
      }

      taxiOnAirfield{
      }

      takeoff{
      }
    }

    waitOnLand{
    }
  }

  sequencer{
    name:t="seq-attackAirTarget"

    reaction{
      event:t="regularCheck"

      sequencer{

        or{

          isTargetDist{
            useTarget:b=no
            op:t="greater"
            dist:r=4000.0
          }

          isTargetDist{
            useTarget:b=yes
            op:t="greater"
            dist:r=4000.0
          }
        }

        recalculateTree{
        }
      }
    }

    isTargetDist{
      useTarget:b=no
      op:t="less"
      dist:r=2000.0
    }

    findUnit{
      searchForAir:b=yes
      onlyMissionTargets:b=no
      radius:r=2000.0
      wingmenAttack:b=yes
    }

    fighterAttackFighter{
    }
  }

  sequencer{
    name:t="seq-attackGroundTarget"

    reaction{
      event:t="regularCheck"

      sequencer{

        or{

          isTargetDist{
            useTarget:b=no
            op:t="greater"
            dist:r=6000.0
          }

          isTargetDist{
            useTarget:b=yes
            op:t="greater"
            dist:r=5000.0
          }
        }

        recalculateTree{
        }
      }
    }

    isTargetDist{
      useTarget:b=no
      op:t="less"
      dist:r=4000.0
    }

    findUnit{
      searchForGround:b=yes
      onlyMissionTargets:b=no
      radius:r=3000.0
      degreesToCheck:r=60.0
      wingmenAttack:b=yes
    }

    fighterAttackGround{
      wingmenAttack:b=yes
      useRockets:b=no
    }
  }

  sequencer{
    name:t="seq-followLeader"

    reaction{
      event:t="regularCheck"

      recalculateTree{
      }
    }

    reaction{
      event:t="groundAhead"

      parallel{

        setControls{
          controls:t="power"
          setTo:r=1.1
          timeTo:r=100500.0
        }

        climbManeuver{
          alt:r=3000.0
        }
      }
    }

    findLeader{
    }

    followTarget{
      useTarget:b=no
      offsetFromBot:b=yes
      cheatSpeed:b=yes
    }
  }

  sequencer{
    name:t="seq-defaultFlight"

    reaction{
      event:t="regularCheck"

      recalculateTree{
      }
    }

    parallel{

      stayAtAlt{
        alt:r=3000.0
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }
}

selector{
  name:t="coopBomberAttempt"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  selector{
    selectStrategy:t="ordered"
    name:t="taxi_and_takeoff"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="collisionAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    sequencer{

      isOnAirfield{
      }

      findClosestAirfield{
      }

      waitForAirfieldClearance{
      }

      taxiOnAirfield{
      }

      takeoff{
      }
    }

    waitOnLand{
    }
  }

  sequencer{

    reaction{
      event:t="regularCheck"

      sequencer{

        or{

          isTargetDist{
            useTarget:b=no
            op:t="greater"
            dist:r=8000.0
          }

          isTargetDist{
            useTarget:b=yes
            op:t="greater"
            dist:r=8000.0
          }
        }

        recalculateTree{
        }
      }
    }

    isTargetDist{
      useTarget:b=no
      op:t="less"
      dist:r=6000.0
    }

    findUnit{
      searchForGround:b=yes
      onlyMissionTargets:b=no
      radius:r=6000.0
      degreesToCheck:r=60.0
      wingmenAttack:b=yes
    }

    fighterAttackGround{
      wingmenAttack:b=yes
      useRockets:b=no
    }
  }

  sequencer{

    reaction{
      event:t="regularCheck"

      recalculateTree{
      }
    }

    reaction{
      event:t="groundAhead"

      parallel{

        setControls{
          controls:t="power"
          setTo:r=1.1
          timeTo:r=100500.0
        }

        climbManeuver{
          alt:r=3000.0
        }
      }
    }

    findLeader{
    }

    followTarget{
      useTarget:b=no
      offsetFromBot:b=yes
      cheatSpeed:b=yes
    }
  }

  sequencer{

    reaction{
      event:t="regularCheck"

      recalculateTree{
      }
    }

    parallel{

      stayAtAlt{
        alt:r=3000.0
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }
}

selector{
  name:t="coopBomber"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  selector{
    selectStrategy:t="ordered"
    name:t="taxi_and_takeoff"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="collisionAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    sequencer{

      isOnAirfield{
      }

      findClosestAirfield{
      }

      waitForAirfieldClearance{
      }

      taxiOnAirfield{
      }

      takeoff{
      }
    }

    waitOnLand{
    }
  }

  sequencer{

    reaction{
      event:t="regularCheck"

      sequencer{

        or{

          isTargetDist{
            useTarget:b=no
            op:t="greater"
            dist:r=8000.0
          }

          isTargetDist{
            useTarget:b=yes
            op:t="greater"
            dist:r=8000.0
          }
        }

        recalculateTree{
        }
      }
    }

    isTargetDist{
      useTarget:b=no
      op:t="less"
      dist:r=6000.0
    }

    findUnit{
      searchForGround:b=yes
      onlyMissionTargets:b=no
      radius:r=6000.0
      degreesToCheck:r=60.0
      wingmenAttack:b=yes
    }

    selector{
      selectStrategy:t="ordered"

      torpedoTarget{
        wingmenAttack:b=yes
      }

      diveBombTarget{
        wingmenAttack:b=yes
      }

      bombTarget{
        wingmenAttack:b=yes
      }

      fighterAttackGround{
        wingmenAttack:b=yes
      }
    }
  }

  sequencer{

    reaction{
      event:t="regularCheck"

      recalculateTree{
      }
    }

    reaction{
      event:t="groundAhead"

      parallel{

        setControls{
          controls:t="power"
          setTo:r=1.1
          timeTo:r=100500.0
        }

        climbManeuver{
          alt:r=3000.0
        }
      }
    }

    findLeader{
    }

    followTarget{
      useTarget:b=no
      offsetFromBot:b=yes
      cheatSpeed:b=yes
    }
  }

  sequencer{

    reaction{
      event:t="regularCheck"

      recalculateTree{
      }
    }

    parallel{

      stayAtAlt{
        alt:r=3000.0
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }
}

selector{
  name:t="leftTurn"

  turn{
    direction:t="left"
  }
}

selector{
  name:t="rightTurn"

  turn{
    direction:t="right"
  }
}

selector{
  name:t="instructorBeh"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  reaction{
    event:t="regularCheck"

    sequencer{

      setControls{
        controls:t="airbrake"
        setTo:r=0.0
        timeTo:r=0.0
      }

      checkAlt{
        op:t="greater"
        alt:r=20.0
      }

      setControls{
        controls:t="gears"
        setTo:r=0.0
        timeTo:r=0.0
      }
    }
  }

  selector{
    selectStrategy:t="ordered"
    name:t="taxi_and_takeoff"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="collisionAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    sequencer{

      isOnAirfield{
      }

      findClosestAirfield{
      }

      waitForAirfieldClearance{
      }

      taxiOnAirfield{
      }

      takeoff{
      }
    }

    waitOnLand{
    }
  }

  sequencer{

    setControls{
      controls:t="flaps"
      setTo:r=0.0
      timeTo:r=0.0
    }

    parallel{

      flyToPos{
        speed:r=350.0
        dist:r=-1.0
        minAlt:r=10.0
      }

      setControls{
        controls:t="rudder"
        setTo:r=0.0
        timeTo:r=1.0
      }
    }
  }

  parallel{
    name:t="staying_at_alt"

    stayAtAlt{
      alt:r=500.0
    }

    stayAtSpeed{
      speedMode:t="maxSpeed"
    }
  }

  rollManeuver{
  }

  parallel{
    name:t="dive1"

    diveManeuver{
      timeToDive:r=25.0
      diveAngle:r=60.0
    }

    setControls{
      controls:t="airbrake"
      setTo:r=1.0
      timeTo:r=25.0
    }
  }

  parallel{
    name:t="dive2"

    diveManeuver{
      name:t="dive2"
      timeToDive:r=20.0
      diveAngle:r=90.0
    }

    setControls{
      controls:t="airbrake"
      setTo:r=1.0
      timeTo:r=20.0
    }
  }

  parallel{
    name:t="rudderCheck"

    stayAtAlt{
      alt:r=500.0
    }

    setControls{
      controls:t="rudder"
      setTo:r=1.0
      timeTo:r=5.0
    }
  }

  turn{
    name:t="combatTurn"
    direction:t="left"
    maxRoll:r=85.0
    extremeElevator:b=yes
    timeToTurn:r=7.0
  }

  sequencer{
    name:t="unitLandOnAirfield"

    reaction{
      event:t="groundAhead"
    }

    land{
    }

    afterLanding{
    }
  }

  selector{
    name:t="unitAttackTarget"
    selectStrategy:t="ordered"

    bombTarget{
    }

    torpedoTarget{
    }

    fighterAttackGround{
    }
  }

  sequencer{
    name:t="stallMan"

    unitSetProps{
      realisticAI:b=yes
    }

    stall{
    }

    antiStall{
    }

    unitSetProps{
      realisticAI:b=no
    }
  }

  sequencer{
    name:t="wait"

    reaction{
      event:t="groundAhead"
    }

    reaction{
      event:t="collisionAhead"
    }

    reaction{
      event:t="outsideBattleField"
    }

    setControls{
      controls:t="gears"
      setTo:r=1.0
      timeTo:r=100500.0
    }
  }
}

selector{
  name:t="commonBomber"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  sequencer{

    reaction{
      event:t="regularCheck"

      recalculateTree{
      }
    }

    reaction{
      event:t="groundAhead"

      parallel{

        setControls{
          controls:t="power"
          setTo:r=1.1
          timeTo:r=100500.0
        }

        climbManeuver{
          alt:r=3000.0
        }
      }
    }

    findLeader{
    }

    followTarget{
      useTarget:b=no
      offsetFromBot:b=yes
      cheatSpeed:b=yes
    }
  }

  flyToPos{
    speed:r=350.0
    dist:r=10.0
    minAlt:r=10.0
  }

  sequencer{

    reaction{
      event:t="regularCheck"

      recalculateTree{
      }
    }

    parallel{

      stayAtAlt{
        alt:r=3000.0
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  selector{
    name:t="unitAttackTarget"
    selectStrategy:t="ordered"

    bombTarget{
    }

    torpedoTarget{
    }

    fighterAttackGround{
    }
  }
}

selector{
  name:t="commonFighter"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  sequencer{

    reaction{
      event:t="regularCheck"

      recalculateTree{
      }
    }

    reaction{
      event:t="groundAhead"

      parallel{

        setControls{
          controls:t="power"
          setTo:r=1.1
          timeTo:r=100500.0
        }

        climbManeuver{
          alt:r=3000.0
        }
      }
    }

    findLeader{
    }

    followTarget{
      useTarget:b=no
      offsetFromBot:b=yes
      cheatSpeed:b=yes
    }
  }

  flyToPos{
    speed:r=500.0
    dist:r=10.0
    minAlt:r=10.0
  }

  sequencer{

    reaction{
      event:t="regularCheck"

      recalculateTree{
      }
    }

    parallel{

      stayAtAlt{
        alt:r=3000.0
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  selector{
    name:t="unitAttackTarget"
    selectStrategy:t="ordered"

    fighterAttackGround{
    }

    fighterAttackFighter{
    }
  }
}

selector{
  name:t="testAI"
  selectStrategy:t="ordered"

  reaction{
    event:t="groundAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="collisionAhead"

    parallel{

      turnToEvasiveDir{
      }

      stayAtSpeed{
        speedMode:t="boostOn"
      }
    }
  }

  reaction{
    event:t="outsideBattleField"

    flyToPos{
      speed:r=550.0
      dist:r=-1.0
      minAlt:r=100.0
      destType:t="battleField"
    }
  }

  sinus{
  }

  waypointFollow{
  }
}